# Workout Tracker Environment Configuration
# Copy this file to .env and update the values

# SECURITY SETTINGS (REQUIRED)
# Generate secure random keys: python -c "import secrets; print(secrets.token_urlsafe(32))"
SECRET_KEY=your-super-secret-key-here-minimum-32-characters-long
JWT_SECRET_KEY=your-jwt-secret-key-here-minimum-32-characters-long

# JWT Configuration
JWT_EXPIRES_MINUTES=15

# Database Configuration
DATABASE_PATH=workout.db

# CORS Configuration (Security Critical)
# Production: Set to your actual domain(s), comma-separated
# Development: Use localhost for testing
CORS_ORIGINS=http://localhost:8080
CORS_SUPPORTS_CREDENTIALS=false

# Rate Limiting Configuration (Security)
# Default API rate limits (comma-separated)
RATE_LIMIT_DEFAULT=2000 per hour, 200 per minute
# Authentication endpoint limits
RATE_LIMIT_AUTH_LOGIN=10 per minute
RATE_LIMIT_AUTH_REGISTER=5 per minute
# Rate limit storage (memory:// for single instance, redis://url for distributed)
RATE_LIMIT_STORAGE_URI=memory://

# Password Policy Configuration (Security)
# Password length requirements
PASSWORD_MIN_LENGTH=6
PASSWORD_MAX_LENGTH=128
# Complexity requirements (true/false)
PASSWORD_REQUIRE_UPPERCASE=false
PASSWORD_REQUIRE_LOWERCASE=false
PASSWORD_REQUIRE_NUMBERS=false
PASSWORD_REQUIRE_SPECIAL=false
# Block common passwords
PASSWORD_BLOCK_COMMON=true

# Flask Environment
FLASK_ENV=development

# Server Configuration
PORT=8080

# Development Settings (Optional)
# Set to 'true' to skip secret validation in development only
SKIP_SECRET_VALIDATION=false

# Production Security Notes:
# 1. Never use default or weak secrets in production
# 2. Use HTTPS-only domains in CORS_ORIGINS
# 3. Set FLASK_ENV=production for production deployments
# 4. Adjust rate limits based on your traffic patterns (production should be stricter)
# 5. Use Redis for rate limiting in distributed deployments
# 6. Store this file securely and never commit actual secrets to git
